{"version":3,"sources":["components/login.component.js","components/signup.component.js","App.js","useToken.js","serviceWorker.js","index.js"],"names":["loginUser","credentials","a","fetch","method","headers","body","JSON","stringify","then","data","json","Login","setToken","useState","identifier","setIdentifier","password","setPassword","handleSubmit","e","preventDefault","token","onSubmit","className","type","placeholder","onChange","target","value","id","htmlFor","href","SignUp","Component","App","tokenString","localStorage","getItem","userToken","parse","getToken","setItem","useToken","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAGeA,E,8EAAf,WAAyBC,GAAzB,SAAAC,EAAA,+EACSC,MAAM,wCAAyC,CACpDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KACpBQ,MAAK,SAACC,GAAD,OAAUA,EAAKC,WAPzB,4C,sBAUe,SAASC,EAAT,GAA8B,IAAbC,EAAY,EAAZA,SAC9B,EAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAY,uCAAG,WAAOC,GAAP,eAAAlB,EAAA,6DACnBkB,EAAEC,iBADiB,SAECrB,EAAU,CAC5Be,aACAE,aAJiB,OAEbK,EAFa,OAMnBT,EAASS,GANU,2CAAH,sDASlB,OACE,0BAAMC,SAAUJ,GACd,sCAEA,yBAAKK,UAAU,cACb,wCACA,2BACEC,KAAK,QACLD,UAAU,eACVE,YAAY,cACZC,SAAU,SAACP,GAAD,OAAOJ,EAAcI,EAAEQ,OAAOC,WAI5C,yBAAKL,UAAU,cACb,2CACA,2BACEC,KAAK,WACLD,UAAU,eACVE,YAAY,iBACZC,SAAU,SAACP,GAAD,OAAOF,EAAYE,EAAEQ,OAAOC,WAI1C,yBAAKL,UAAU,cACb,yBAAKA,UAAU,kCACb,2BACEC,KAAK,WACLD,UAAU,uBACVM,GAAG,iBAEL,2BAAON,UAAU,uBAAuBO,QAAQ,gBAAhD,iBAMJ,4BAAQN,KAAK,SAASD,UAAU,iCAAhC,WAGA,uBAAGA,UAAU,8BAAb,UACS,uBAAGQ,KAAK,KAAR,e,oCCjEMC,E,4JACjB,WACI,OACI,8BACI,wCAEA,yBAAKT,UAAU,cACX,6CACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,gBAG5D,yBAAKF,UAAU,cACX,4CACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,eAG5D,yBAAKF,UAAU,cACX,wCACA,2BAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,iBAG7D,yBAAKF,UAAU,cACX,2CACA,2BAAOC,KAAK,WAAWD,UAAU,eAAeE,YAAY,oBAGhE,4BAAQD,KAAK,SAASD,UAAU,iCAAhC,YACA,uBAAGA,UAAU,8BAAb,sBACuB,uBAAGQ,KAAK,KAAR,iB,GA5BHE,aCoDrBC,MA7Cf,WACE,MCRa,WACb,IAKA,EAA0BrB,mBALT,WACf,IAAMsB,EAAcC,aAAaC,QAAQ,SACnCC,EAAYhC,KAAKiC,MAAMJ,GAC7B,cAAOG,QAAP,IAAOA,OAAP,EAAOA,EAAWjB,MAEemB,IAAnC,mBAAOnB,EAAP,KAAcT,EAAd,KAMA,MAAO,CACLA,SANgB,SAAC0B,GACjBF,aAAaK,QAAQ,QAASnC,KAAKC,UAAU+B,IAC7C1B,EAAS0B,EAAUjB,QAKnBA,SDN0BqB,GAApBrB,EAAR,EAAQA,MAAOT,EAAf,EAAeA,SAEf,OAAKS,EAIH,kBAAC,IAAD,KACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,kDACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeoB,GAAI,YAAnC,eAGA,yBAAKpB,UAAU,2BAA2BM,GAAG,uBAC3C,wBAAIN,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWoB,GAAI,YAA/B,YAIF,wBAAIpB,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWoB,GAAI,YAA/B,gBASV,yBAAKpB,UAAU,SACb,yBAAKA,UAAU,SACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,WAAWC,UAAWnC,IAClC,kBAAC,IAAD,CAAOkC,KAAK,WAAWC,UAAWd,SAhCrC,kBAACrB,EAAD,CAAOC,SAAUA,KEDRmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.27da65d3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nasync function loginUser(credentials) {\n  return fetch(\"http://18.139.217.160:1234/auth/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(credentials),\n  }).then((data) => data.json());\n}\n\nexport default function Login({ setToken }) {\n  const [identifier, setIdentifier] = useState();\n  const [password, setPassword] = useState();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const token = await loginUser({\n      identifier,\n      password,\n    });\n    setToken(token);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Log in</h3>\n\n      <div className=\"form-group\">\n        <label>Email</label>\n        <input\n          type=\"email\"\n          className=\"form-control\"\n          placeholder=\"Enter email\"\n          onChange={(e) => setIdentifier(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label>Password</label>\n        <input\n          type=\"password\"\n          className=\"form-control\"\n          placeholder=\"Enter password\"\n          onChange={(e) => setPassword(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <div className=\"custom-control custom-checkbox\">\n          <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            id=\"customCheck1\"\n          />\n          <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n            Remember me\n          </label>\n        </div>\n      </div>\n\n      <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">\n        Sign in\n      </button>\n      <p className=\"forgot-password text-right\">\n        Forgot <a href=\"#\">password?</a>\n      </p>\n    </form>\n  );\n}\n\nLogin.propTypes = {\n  setToken: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\n\nexport default class SignUp extends Component {\n    render() {\n        return (\n            <form>\n                <h3>Register</h3>\n\n                <div className=\"form-group\">\n                    <label>First name</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"First name\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Last name</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Last name\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Email</label>\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">Register</button>\n                <p className=\"forgot-password text-right\">\n                    Already registered <a href=\"#\">log in?</a>\n                </p>\n            </form>\n        );\n    }\n}","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Login from \"./components/login.component\";\nimport SignUp from \"./components/signup.component\";\nimport useToken from \"./useToken\";\n\nfunction App() {\n  const { token, setToken } = useToken();\n\n  if (!token) {\n    return <Login setToken={setToken} />;\n  }\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n          <div className=\"container\">\n            <Link className=\"navbar-brand\" to={\"/sign-in\"}>\n              RemoteStack\n            </Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/sign-in\"}>\n                    Sign in\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/sign-up\"}>\n                    Sign up\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"outer\">\n          <div className=\"inner\">\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route path=\"/sign-in\" component={Login} />\n              <Route path=\"/sign-up\" component={SignUp} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport default function useToken() {\n  const getToken = () => {\n    const tokenString = localStorage.getItem(\"token\");\n    const userToken = JSON.parse(tokenString);\n    return userToken?.token;\n  };\n  const [token, setToken] = useState(getToken());\n  const saveToken = (userToken) => {\n    localStorage.setItem(\"token\", JSON.stringify(userToken));\n    setToken(userToken.token);\n  };\n\n  return {\n    setToken: saveToken,\n    token,\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}